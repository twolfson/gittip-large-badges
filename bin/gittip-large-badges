#!/usr/bin/env node

// Load in dependencies
var fs = require('fs'),
    express = require('express'),
    jade = require('jade'),
    LRU = require('lru-cache'),
    renderBadge = require('../lib/gittip-large-badges');

// Define our app
var app = express(),
    isProduction = process.env.NODE_ENV === 'production';
app.use(express.logger());

// Index route sends information on how to use app
var indexJade = fs.readFileSync(__dirname + '/index.jade', 'utf8'),
    indexHtml = jade.render(indexJade);
app.get('/', function indexRoute (req, res) {
  res.send(indexHtml);
});

// Allow for direct testing of render page
app.use('/render', express['static'](__dirname + '/../lib/render'));

// Badge route sends screenshot of large user badge
var badgeCache = new LRU({max: 9000, maxAge: 1000 * 60 * 5});
function badgeRoute (req, res, next) {
  // Prepare common endpoint for sending buffer
  function sendBadge(base64Png) {
    // Respond with the binary data
    // var buff = stdout;
    res.set('Content-Type', 'image/png');
    var buff = new Buffer(base64Png, 'base64');
    res.send(buff);
  }

  // If the badge is cached, send it
  var params = req.params,
      username = params.username,
      badge = badgeCache.get(username);
  if (badge) {
    return sendBadge(badge);
  }

  // Otherwise, fetch the badge
  renderBadge(params, function (err, stdout, stderr) {
    // If there was an error, log stderr and callback with it
    if (err) {
      console.error('PHANTOM STDOUT: ', stdout);
      console.error('PHANTOM STDERR: ', stderr);
      return next(err);
    }

    // Otherwise, save the badge to the cache
    badgeCache.set(username, stdout);

    // Response with the badge
    sendBadge(stdout);
  });
}

// Semver'd API bitches.
app.get('/:username', badgeRoute);
app.get('/1/:username', badgeRoute);
app.get('/1.0/:username', badgeRoute);
app.get('/1.0.0/:username', badgeRoute);

// Begin listening
var port = process.env.PORT || 5000;
app.listen(port, function() {
  console.log('Server started at http://127.0.0.1:' + port + '/');
});
